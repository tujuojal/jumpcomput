#!/usr/bin/python

from scipy import *
#import pylab
#import inrun
import lento
class Laatikko:
    pieces=100		#how many pieces in box, at some point more complex geometries!!
    Drop=1		#drop from the takeoff
    Length=17		#length of the table
    Land_Angle=31.*2.*pi/360.	#angle of landing
    Land_Height=20		#height of the landing
    xland=zeros((pieces,1))
    yland=zeros((pieces,1))
    curvelength=length+Land_Height/sin(Land_Angle)	#length of the curve determining the box
    ds=curvelength/pieces				#steplength along the curve
    for i in range(len(xland)-1):
	    if xland[i]<Length:
		    xland[i+1]=xland[i]+ds
	    else:
		    xland[i+1]=xland[i]+sin(Land_Angle)*ds
		    yland[i+1]=yland[i]+cos(Land_Angle)*ds

    def hit_land(kalku,valku,sxalku,syalku,ylengthstr,runangle,radius,flat,takeoffAngle,takeoffHeight):
        [t,sx,sy,vx,vy,ax,ay]=inrun2.inrun(kalku,valku,sxalku,syalku,ylengthstr,runangle,radius,flat,takeoffAngle,takeoffHeight)
	[kode,sxloppu,syloppu,vxloppu,vyloppu]=takeoff2(ylengthstr,runangle,radius,flat,takeoffAngle,takeoffHeight)
	[t1,sx1,sy1,vx1,vy1,ax1,ay1]=lento.lento(sxloppu,syloppu,vxloppu,vyloppu)
        for index in range(len(t1)-1):
		if sy1[index]<syloppu-drop:
			print "closer to landing"

if __name__ == '__main__': 
##rest after
	[t,sx,sy,vx,vy,ax,ay]=inrun2.inrun(0,0,0,0,25,31.*2.*pi/360.,20,5.,21.*2.*pi/360.0,3)
	[kode,sxloppu,syloppu,vxloppu,vyloppu]=inrun2.takeoff2(ylengthstr,runangle,radius,flat,takeoffAngle,takeoffHeight)
	[t1,sx1,sy1,vx1,vy1,ax1,ay1]=lento.lento(0,0,10,14)
	
	pylab.plot(sx1,sy1)
	pylab.plot([0,19,19+cos(35./360.*2.*pi)*31],[0,-4,-4-sin(35./360.*2.*pi)*31])
#	pylab.show()
#	#print vy1
